spring.application.name=Tutorverse
server.port=${PORT:8080}
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://129.159.229.155:5431/Deployment2}
spring.datasource.username=${DATABASE_USERNAME:group29}
spring.datasource.password=${DATABASE_PASSWORD:project25}

# spring.profiles.active=prod
app.use.ssl=${APP_USE_SSL:false}
#spring.datasource.url=jdbc:postgresql://localhost:5432/tutorverse
#spring.datasource.username=postgres
#spring.datasource.password=1234
#spring.datasource.driver-class-name=org.postgresql.Driver

app.frontend.url=${FRONTEND_URL:https://m.tutorverse.app}
app.backend.url=${BACKEND_URL:https://api.tutorverse.app}
app.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001,https://frontend.shancloudservice.com,https://f.tutorverse.app}
app.base.url=${APP_BASE_URL:http://localhost:8080}
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
logging.level.org.hibernate.SQL=OFF
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=OFF
app.jitsi.domain=${JITSI_DOMAIN:meet.jit.si}
app.jitsi.secret=${JITSI_SECRET:mysecret}
app.jitsi.appid=${JITSI_APPID:myappId}

# Flyway enabled for migration-based schema creation - tests only
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.clean-disabled=false
spring.flyway.ignore-migration-patterns=*:missing
spring.flyway.validate-on-migrate=true
app.jwt.secret=${JWT_SECRET:default_jwt_token_for_development_only_not_for_production}


spring.security.oauth2.client.registration.google.redirect-uri=${app.backend.url}/login/oauth2/code/google
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.client-name=Google

spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
# AWS Configuration
aws.accessKey=${AWS_ACCESS_KEY}
aws.secretKey=${AWS_SECRET_KEY}
aws.region=${AWS_REGION}
aws.bucketName=${AWS_BUCKET_NAME}

# SendGrid Configuration
sendgrid.api.key=${SENDGRID_API_KEY}
email.notifications.enabled=${EMAIL_NOTIFICATIONS_ENABLED:true}
sendgrid.template.contentUpload=${SENDGRID_TEMPLATE_CONTENT_UPLOAD:}
sendgrid.template.reminder=${SENDGRID_TEMPLATE_REMINDER:}

# SMTP Configuration (Fallback)
spring.mail.host=${SMTP_HOST:smtp.gmail.com}
spring.mail.port=${SMTP_PORT:587}
spring.mail.username=${SMTP_USERNAME:}
spring.mail.password=${SMTP_PASSWORD:}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
email.use.smtp.fallback=${USE_SMTP_FALLBACK:false}

# PayHere Configuration
payhere.merchantId=${PAYHERE_MERCHANT_ID:1234567}
payhere.merchantSecret=${PAYHERE_MERCHANT_SECRET:MzkyMjU2OTgzNDM2NzExNTk1ODUzNTc3MjE0NzU3MzQ5ODI1NzYy}
payhere.currency=${PAYHERE_CURRENCY:LKR}
payhere.checkoutUrl=${PAYHERE_CHECKOUT_URL:https://sandbox.payhere.lk/pay/checkout}
payhere.returnUrl=${PAYHERE_RETURN_URL:http://localhost:3000/dashboard/courses}
payhere.cancelUrl=${PAYHERE_CANCEL_URL:http://localhost:3000/dashboard/courses}
payhere.notifyUrl=${PAYHERE_NOTIFY_URL:https://unsnuffed-repellently-paris.ngrok-free.dev/api/payments/notify}


# AI integration
gemini.api.key=${GEMINI_API_KEY:dummy-key-for-development}
# Base (no trailing slash); fallback uses v1beta endpoint
gemini.api.base=${GEMINI_API_BASE:https://generativelanguage.googleapis.com/v1beta}
# Model path part (Google standard form starts with models/)
gemini.model=${GEMINI_MODEL:models/gemini-2.5-flash}

